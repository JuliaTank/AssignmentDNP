@page "/AddPerson"
@using Models
@using Persistence
@using AssignmentDNP.Authentication
@inject NavigationManager NavigationManager
@inject FileContext FileContext
@inject AuthenticationStateProvider AuthenticationStateProvider

        
    
<EditForm Model="@newAdult" OnValidSubmit="@AddNewAdult">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div id="addForm">
        
        <h3 id="AddPerson" xmlns="http://www.w3.org/1999/html">Add Person</h3>
        <div class="col-12 row">

            <span class="col-6">
                <div class="form-group" style="font-family: -webkit-body;  color:#821ef4">
                    Job Title:<br/>
                    <InputText @bind-Value="newAdult.JobTitle"/></div></span>
            <span class="col-6">
                <div class="form-group " style="font-family: -webkit-body ;  color:#821ef4">
                    Id:<br/>
                    <InputNumber @bind-Value="newAdult.Id"/>
                </div> </span>

        </div>
        <div class="col-12 row">
            <span class="col-6">
                <div class="form-group " style="font-family: -webkit-body;  color:#821ef4">
                    First name:<br/>
                    <InputText @bind-Value="newAdult.FirstName"/>
                </div>
            </span>
            <span class="col-6">
                <div class="form-group" style="font-family: -webkit-body;  color:#821ef4">
                    Last name:<br/>
                    <InputText @bind-Value="newAdult.LastName"/>
                </div></span>
        </div>
        <div class="col-12 row">
            <span class="col-6">
                <div class="form-group " style="font-family: -webkit-body;  color:#821ef4">
                    Hair color:<br/>
                    <InputText @bind-Value="newAdult.HairColor"/>
                </div></span>
            <span class="col-6">
                <div class="form-group " style="font-family: -webkit-body;  color:#821ef4">
                    Eye color:<br/>
                    <InputText @bind-Value="newAdult.EyeColor"/>
                </div></span>
        </div>
        <div class="col-12 row">
            <span class="col-6">
                <div class="form-group "style="font-family: -webkit-body;  color:#821ef4">
                    Age:<br/>
                    <InputNumber @bind-Value="newAdult.Age"/>
                </div></span>
            <span class="col-6">
                <div class="form-group " style="font-family: -webkit-body;  color:#821ef4">
                    Weight:<br/>
                    <InputNumber @bind-Value="newAdult.Weight"/></div></span>
        </div>
        <div class="col-12 row">
            <span class="col-6">
                <div class="form-group " style="font-family: -webkit-body;  color:#821ef4">
                    Height:<br/>
                    <InputNumber @bind-Value="newAdult.Height"/>
                </div></span>
            <span class="col-6">
                <div class="form-group  " style="font-family: -webkit-body;  color:#821ef4">
                    Sex:<br/>
                    <InputText @bind-Value="newAdult.Sex"/>
                </div></span>
        </div>
        <div class="col-12 row">
            <span class="col-6">
                <div style="color:red">@errorMessage</div>
            </span>
            <span class="col-6">
                <p class="actions">
                    <button class="buttonMenu" type="submit">
                        <span>Create</span>
                    </button>
                </p>
            </span>
        </div>
    </div>
  
</EditForm>

@code {
    private Adult newAdult = new Adult();
    private string errorMessage;
    
    private async Task AddNewAdult()
    {
        errorMessage = "";
        try
        {
            ((PersonCustomAuthenticationStateProvider) AuthenticationStateProvider).ValidateAdd
                (newAdult.FirstName,newAdult.LastName,newAdult.Sex,newAdult.Id);
             FileContext.AddAdult(newAdult);
                    NavigationManager.NavigateTo("/PeopleList");
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
       
    }
   
    
    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();
        var user = (await AuthStat).User;
        if(!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo($"/");
        }
    }
}